package usc.sql.string;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.io.PrintWriter;
import java.nio.file.Files;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import usc.sql.global.GlobalCallGraph;

public class DataCollection {

	/*
	I/System.out( 1759): Block Starts: 1434479186084
	I/System.out( 1759): Start counter: 1
	D/audio_hw_primary(  190): out_set_parameters: enter: usecase(1: low-latency-playback) kvpairs: routing=2
	I/System.out( 1759): End counter: 0 1434479186102
	I/System.out( 1759): Block Ends: 1434479186102
*/
	public static void main(String[] args) throws IOException {
		Map<String,Integer> cnew = new HashMap<>();
	    Map<String,Integer> cnew1 = new HashMap<>();
	    collectTime();
		collectInfo("/home/yingjun/Documents/sqlite/AutoDataCollectionLock4.txt",cnew);
		/*
		collectInfo("/home/yingjun/Documents/sqlite/AutoDataCollectionNew1.txt",cnew1);
		
		for(String app : cnew.keySet())
		{
			int n = cnew.get(app);
			int n1 = cnew1.get(app);
			if(n!=n1)
			{
				System.out.println(app+" new "+cnew.get(app)+" new1 "+cnew1.get(app));
				
			}
		}
		*/
		
		//calculateEnergy();
		//calculateEnergyTimer();
		/*
		long start = System.currentTimeMillis();
		long a1 = System.nanoTime();

			long end =  System.currentTimeMillis();
			if(end-start>500)
			{
				start = System.currentTimeMillis();
			}
		
		long a2 = System.nanoTime();
		System.out.println(a2-a1);
		
		*/
	}
	public static void calculateEnergyTimer()
	{
		String daq_path = "Energy/Timer/energy";
		EnergyDataBase database=new EnergyDataBase(daq_path);
		BufferedReader br = null;
		 
		try {
 
			String line;
 
			br = new BufferedReader(new FileReader("Energy/Timer/logcat.txt"));
 
			long start=0,end = 0,fac = 0;
			double total = 0, count = 0 ,totalTime = 0;
			
			while ((line = br.readLine()) != null) {
				if(line.contains("Fac:"))
					fac = Long.parseLong(line.split(":")[2]);
				else if(line.contains("Start1"))
				{
					start = Long.parseLong(line.split(":")[1].replaceAll(" Start", ""));
				}
				else if(line.contains("End1"))
				{
					end = Long.parseLong(line.split(":")[1].replaceAll(" End", ""));
					total+=(int)database.QueryMilliEnergy(start,end)*1.0/fac;
					totalTime += (end-start)*1.0/fac;
					count++;
				}
			}
			System.out.println("Energy(mj):"+(total/count)/1000 + " Time(ms):"+totalTime*1.0/count);
			
		}
		catch(IOException e)
		{
			
		}
	}
	public static void calculateEnergy()
	{
		List<String> targetLoop = new ArrayList<>();
		targetLoop.add("<ban.card.payanywhere.StartScreen: void ResetItemEvent()>1");
		targetLoop.add("<com.a1.quiz.asvab.free.db.CRUDManager: void markCategories(java.util.List)>2");
		String daq_path = "/home/yingjun/Documents/Energy/energy";
		EnergyDataBase database=new EnergyDataBase(daq_path);

		long start1  = 1486600387505L;
		long end1 =  1486595467394L;
		//System.out.println((end1-start1));
		//System.out.println((int)database.QueryMilliEnergy(start1,end1));

		BufferedReader br = null;
		 
		try {
 
			String sCurrentLine;
 
			br = new BufferedReader(new FileReader("/home/yingjun/Documents/Energy/logcat.txt"));
 
			long start=0,end = 0;
			boolean target = false;
			while ((sCurrentLine = br.readLine()) != null) {
				//if(sCurrentLine.contains("StartAction")||sCurrentLine.contains("StartLoop")||sCurrentLine.contains("EndAction")||sCurrentLine.contains("EndLoop"))
				//	System.out.println(sCurrentLine);
				
				if(sCurrentLine.contains("StartAction"))
				{
					start = Long.parseLong(sCurrentLine.split(":")[2]);
					target = false;
				}
				else if(sCurrentLine.contains("StartLoop"))
				{
					String loop = sCurrentLine.split("@")[1];
					loop = loop.substring(0,loop.lastIndexOf(":"));
					if(targetLoop.contains(loop))
						target = true;
				}
				else if(sCurrentLine.contains("EndAction"))
				{	
					end = Long.parseLong(sCurrentLine.split(":")[2]);
					
					long delta = end-start;
					//int e = (int) (database.QueryEnergy(start,end,delta)/100);
					

					if(target)
					{
						//System.out.println(delta);
						
						System.out.println((int)database.QueryMilliEnergy(start,end));
						
					}
					
				}

			}
			

 
		} catch (IOException e) {
			e.printStackTrace();
		}
		
		
		
		try {
			 
			String sCurrentLine;
 
			br = new BufferedReader(new FileReader("/home/yingjun/Documents/Energy/logcat.txt"));
 
			
			
			long start=0,end = 0;
			while ((sCurrentLine = br.readLine()) != null) {
				if(sCurrentLine.contains("StartLoop"))
				{
					String loop = sCurrentLine.split("@")[1];
					loop = loop.substring(0,loop.lastIndexOf(":"));
					if(targetLoop.contains(loop))
					{	
						start = Long.parseLong(sCurrentLine.split(":")[3]);
					}
					
				}
				else if(sCurrentLine.contains("EndLoop"))
				{	
					String loop = sCurrentLine.split("@")[1];
					loop = loop.substring(0,loop.lastIndexOf(":"));
					if(targetLoop.contains(loop))
					{	
						end = Long.parseLong(sCurrentLine.split(":")[3]);
						
						long delta = end-start;
						//System.out.println(delta);
						System.out.println((int)database.QueryMilliEnergy(start,end));
					}
					//int e = (int) (database.QueryEnergy(start,end,delta)/100);
					//System.out.println(e);
					
	
					//
					//if(delta>0)
					//System.out.println(delta);
					//System.out.println((int)database.QueryMilliEnergy(start,end));
				}
	
				
			}
			//System.out.println(loopcount/5 - 1);
		
 
		} catch (IOException e) {
			e.printStackTrace();
		}
	}
	

	public static void collectInfo(String file,Map<String,Integer> cnew) throws IOException
	{
		
			BufferedReader br = new BufferedReader(new FileReader(new File(file)));
			String line = br.readLine();
					
			String app = null;


			int numAHP = 0;
			int numHP = 0;
			int numSAHP = 0;
			int numDBL = 0;
			int numAHPRelatedToLock = 0;
			Map<Integer,Integer> length = new HashMap<>();
			Map<Integer,Integer> lengthAHP = new HashMap<>();
			int totalAHPCallChain = 0;
			int maxAHPCallChain = 0;
			List<Integer> relevantCode = new ArrayList<>();
			double pruneCCGTotal = 0;
			int numApps = 0;
			int numDBApps = 0;
			int numHPApps = 0;
			int numAHPApps = 0;
			int currentAHP = 0;
			int currentSAHP = 0;
			int currentHP = 0;
			List<Integer> totalCode = new ArrayList<>();
			List<Integer> AHPNums = new ArrayList<>();
			boolean isAHP = false;
			
	        while (line != null) {
	        	if(line.startsWith("/App"))
	        	{
	        		app = line;

	        		
	        		numApps++;	        		
	        		/*
	        		if(numApps == 90)
	        		{
	        			System.out.println(line);
	        			break;
	        		}
	        		*/
	        	}
	        	else if(line.startsWith("Exist Repair:true"))
	        		numAHPApps++;
	        	else if(line.startsWith("Exist Opp:true"))
	        		numHPApps++;
	        	else if(line.startsWith("Exist SQL in User Code:true"))
	        		numDBApps++;
	        	else if(line.startsWith("Num of HP"))
	        	{
	        		currentHP = Integer.parseInt(line.split(":")[1]);
	        		numHP += Integer.parseInt(line.split(":")[1]);

	        		cnew.put(app, currentHP);
	        	}
	        	else if(line.startsWith("Num of AHP"))
	        	{
	        		numAHP += Integer.parseInt(line.split(":")[1]);
	        		currentAHP = Integer.parseInt(line.split(":")[1]);
	        		
	        		if(currentAHP!=0)
	        			AHPNums.add(currentAHP);
	        		//	System.out.println(currentAHP);
	        	}
	        	else if(line.startsWith("Num of in scope HP"))
	        	{

	        		numSAHP += Integer.parseInt(line.split(":")[1]);
	        	}
	        	else if(line.startsWith("Num of DB in loop"))
	        		numDBL += Integer.parseInt(line.split(":")[1]);
	        	else if(line.startsWith("@HP@"))
	        		isAHP = false;
	        	else if(line.startsWith("@AHP@"))
	        		isAHP = true;
	        	else if(line.startsWith("Target loop nests a lock or is nested in a lock:true"))
	        	{
	        		if(isAHP&&!app.contains("/App562/"))
	        			numAHPRelatedToLock+=1;
	        	}

	        	else if(line.startsWith("Line of target bytecodes"))
	        	{
	        		int count = Integer.parseInt(line.split(":")[1]);
	        		relevantCode.add(count);
	        	}
	        	else if(line.startsWith("CCG prune out code"))
	        	{
	        		if(!line.contains("NaN"))
	        		{
	        			double percent = Double.parseDouble(line.split(":")[1].replaceAll("%", ""));
	        			pruneCCGTotal += percent;
	        		}
	        	}
	        	else if(line.startsWith("Num of bytecodes in program:"))
	        	{
	        		totalCode.add(Integer.parseInt(line.split(":")[1]));
	        	}
	         	else if(line.startsWith("Length of call chain between db operation and call graph entry"))
	        	{
	         		if(isAHP&&!app.contains("/App562/"))
	        		{
	         			int chain = Integer.parseInt(line.split(":")[1]);
	         			totalAHPCallChain += chain;
	         			if(chain > maxAHPCallChain)
	         				maxAHPCallChain = chain;
	        		}
	        	}
	        	else if(line.startsWith("Length of call chain between db operation and loop header"))
	        	{
	        		//do not include the outlier
	        		if(!app.contains("/App562/"))
	        		{
		        		int l = Integer.parseInt(line.split(":")[1]);
	
		        		if(length.containsKey(l))
		        			length.put(l, length.get(l)+1);
		        		else
		        			length.put(l, 1);
		        		if(isAHP)
		        		{
			        		int l1 = Integer.parseInt(line.split(":")[1]);
			        		if(lengthAHP.containsKey(l1))
			        			lengthAHP.put(l1, lengthAHP.get(l1)+1);
			        		else
			        			lengthAHP.put(l1, 1);
		        		}
	        		}
	        		
	        	}

	        	line = br.readLine();
	        }
	        br.close();
	        
	        System.out.println("Total num of apps:"+numApps+"\n"
	        		+ "Total num of apps with db operations:"+numDBApps+"\n"
	        		+ "Total num of apps with HP:"+numHPApps+"\n"
	        		+ "Total num of apps with AHP:"+numAHPApps);
	        
	        System.out.println("Num of DB in loop:"+numDBL+"\n"
	        + "Num of HP:"+numHP+"    after excluding outlier:"+ (numHP-4241)+"\n"
	        + "Num of in-scope HP:"+numSAHP+"   after excluding outlier:"+(numSAHP-4220)+"\n"
	        + "Num of AHP:"+numAHP+"   after excluding outlier:"+(numAHP-4220));
	        
	        System.out.println("Average number of AHP:"+(numAHP-4220)*1.0/(numAHPApps-1));
	        Collections.sort(AHPNums);
	        
	        System.out.println("Median number of AHP:"+AHPNums.get(numAHPApps/2));
	        System.out.println("AHP with loop related to locks:"+numAHPRelatedToLock+" "+numAHPRelatedToLock*1.0/(numAHP-4220)*100+"%");
	        System.out.println("Percentage of in-scope HPs that may cause deadlock:"
	        		+ (numSAHP-numAHP)*1.0/(numSAHP-4220)*100+"%");
	        
	        //App 69 has 20134 relevant byte code
	        int largerThanApp69  = 0;
	        for(int i = 0; i < relevantCode.size(); i++)
	        {
	        	if(relevantCode.get(i) > 20134)
	        		largerThanApp69++;
	        }
	        Collections.sort(totalCode);
	        int totalNonEmptyApp = 0;
	        int[] dis = {1000,10000,100000};
	        Integer [] disNum = new Integer[4];
	        for(int i = 0; i < 4; i++)
	        	disNum[i] = 0;
 	        for(int i = 0; i < totalCode.size();i++)
	        {
	        	int size = totalCode.get(i);
	        	if(size!=0)
	        		totalNonEmptyApp++;
	        	for(int j = 0; j < 2; j++)
	        	{
	        		if(size >= dis[j] && size < dis[j+1])
	        			disNum[j+1] ++;
	        	}
	        	if(size < dis[0])
	        		disNum[0]++;
	        	if(size >= dis[2])
	        		disNum[3]++;
	        			
	        }
	       	
	       	System.out.println("Distribution of bytecode in program:"+Arrays.asList(disNum));
	       	System.out.println(pruneCCGTotal+" "+totalNonEmptyApp);
	        System.out.println("CCG prune out in average:"+pruneCCGTotal*1.0/totalNonEmptyApp+"%");
	        System.out.println("Relevant Bytecode larger than App69:"+largerThanApp69*1.0/relevantCode.size()*100+"%");
	  
	        
	        
	       // System.out.println("Before excluding outlier:"+length);
	        //System.out.println("Before excluding outlier:"+lengthAHP);
	        
	        //outlier 
	        //length.put(2, length.get(2)-4241);
	        //lengthAHP.put(2, lengthAHP.get(2)-4220);
	        int total = 0;
	        int zero = length.get(0);

	        System.out.println("Average call path length between db operation and call graph entry:"+totalAHPCallChain*1.0/(numAHP-4220));
	        System.out.println("Max call path length between db operation and call graph entry:"+maxAHPCallChain);
	        
	        //System.out.println("After excluding outlier:"+length);
	        System.out.println("Call path length between db operation and loop header:"+lengthAHP);
	        
	        for(Entry<Integer,Integer> en : length.entrySet())
	        {
	        	total += en.getValue();
	        }
	        //System.out.println("Inter-procedural HP:"+(1-zero*1.0/total)*100+"%");
	        
	        int totalAHP = 0;
	        int zeroAHP = lengthAHP.get(0);
	        int zeroAndOneAHP = lengthAHP.get(0)+lengthAHP.get(1);
	        for(Entry<Integer,Integer> en : lengthAHP.entrySet())
	        {
	        	totalAHP += en.getValue();
	        }
	        System.out.println("AHP with call path length >=1:"+(1-zeroAHP*1.0/totalAHP)*100+"%");
	        System.out.println("AHP with call path length >=2:"+(1-zeroAndOneAHP*1.0/totalAHP)*100+"%");

	}
	public static void collectTime() throws IOException
	{

		 BufferedReader br = new BufferedReader(new FileReader("/home/yingjun/Documents/sqlite/AndroidTarget/RunningTime.txt"));
		 List<Integer> time = new ArrayList<>();
		 List<Integer> soot = new ArrayList<>();
		 String line = br.readLine();

	        while (line != null) {
	           // if(line.contains("Batch"))
	           // 	System.out.println(listOfFiles[i].getName());
	        	if(line.startsWith("Soot:"))
	        	{
	        		int sootTime = Integer.parseInt(line.split(":")[1].replaceAll("ms", ""));
	        		soot.add(sootTime);
	        	}
	        	else if(line.startsWith("Total:"))
	        	{
	        		int totalTime = Integer.parseInt(line.split(":")[1].replaceAll("ms", ""));
	        		time.add(totalTime);
	        	}

	            line = br.readLine();
	        }
	        
	       br.close();
	       int total = 0;
	       for(int i = 0; i < time.size(); i++)
	    	   total += time.get(i);
	       System.out.println("Average Total:"+(total*1.0/1000)/time.size()+"s");
	       
	       double sootPercent = 0;
	       for(int i = 0; i < time.size(); i++)
	    	   sootPercent += soot.get(i)*1.0/time.get(i);
	       
	       System.out.println("Average Percentage of time spent on Soot:"+(sootPercent*100.0)/time.size()+"%");
	
	}

}
